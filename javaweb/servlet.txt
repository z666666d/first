Servlet概述
	Servlet是SUN公司制定的一套开发动态网页的技术
	JavaEE相关类，包名都是以javax开头

编写Servlet的步骤
	1.建立一个标准的JavaWeb应用
	即WEB-INF：classes、lib、web.xml

	2.在classes目录中，编写一个servlet类(必须直接或间接的实现javax.servlet.Servlet接口)
	package cn.itcast.servlet;

	import java.io.*;
	import javax.servlet.*;

	public static FristServlet extends GenericServlet{
		public void service(ServletRequest req,ServletResponse res)
				throws ServletException,java.io.IOException{
			OutputStream out = res.getOutputStream();
			out.write("Hello Servlet".getBytes());
			out.close();
		}
	}

	3.进入classes目录,对讲好的Servlet类进行编译
	前提:把servlet-api.jar加入到classpath中  set classpath=%classpath%;servlet-api.jar地址
	执行:javac -d . FristServlet.java

	4.修改web.xml ,对FristServlet进行URL映射,配置如下:
	<?xml version="1.0" encoding="ISO-8859-1"?>

	<web-app xmlns="http://java.sun.com/xml/ns/javaee"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		version="2.5">

		<servlet>
			<servlet-name>FristServlet</ servlet-name>
			<servlet-class>cn.itcast.servlet.FristServlet<servlet-class>
		</ servlet>

		<servlet-mapping>
			<servlet-name>FristServlet</ servlet-name>
			<url-pattern>/holle</ url-pattern>
		</ servlet-mapping>
	</ web-app>

	5.把应用部署到Tomcat中

	6.访问地址:http://localhost:8080/FristApp/holle 就可以看到输出结果

servlet类的执行过程
	1.Tomcat加载web.xml文件
	2.IE请求资源/helle
	3.Tomcat在web.xml中寻找url-pattern元素,并通过该元素找到servlet类文件
	4.Tomcat找到类后,调用类中的service()方法
	5.在IE中显示结果

	容器最终是调用service()方法为客户服务
	Servlet接口的常用方法:
		
		public void init(ServletConfig config) 初始化方法
		servlet类被实例化后就执行,且执行一次

		public void destroy() 销毁servlet对象

		这些方法都是由容器调用
	在内存中,一个Servlet只有一个实例.针对不同的用户请求,容器采用多线程的机制来调用service方法

	默认情况下,第一次访问的时候实例化servlet对象并调用init()方法初始化
	那么就会影响第一个用户访问的速度.
	
	在web.xml文件的servlet标签中加上<load-on-startup>标签
	表示在容器启动时就加载这个Servlet(实例化并初始化)
	它的值必须是整数,表示该servlet被载入的顺序(优先级)
	值为0或大于0时,表示容器在启动时就加载并初始化这个servlet,如果值小于0或没有该标签,则在第一次访问时才会去加载
	这个值越小,优先级就越高.当两个值相同时,容器会自己选择顺序来加载

servlet(模板方法设计模式)
	如果涉及与HTTP协议有关的servlet,一般选择继承javax.servlet.http.HttpServlet
	不要覆盖其service方法,而是覆盖doGet()和doPost()方法.会根据请求方式自动选择方法

	HttpServlet中的service方法就是典型的模板方法设计模式的具体应用

servlet映射细节
	由于客户端是通过URL地址访问web服务器中的资源,所以Servlet程序想要被访问,必须把servlet程序映射到一个URL地址上
	这个映射在web.xml文件中使用<servlet>和<servlet-mapping>元素完成

	<servlet>元素用于注册Servlet,包含两个主要的子元素<servlet-name>和<servlet-class>,
	分别用于设置Servlet的注册名称和Servlet的完整类名

	一个<servlet-mapping>元素用于映射一个已注册的Servlet的一个对外访问路径
	包含两个子元素<servlet-name>和<url-pattern>.分别用于指定Servlet的注册名称和Servlet的对外访问路径

	同一个servlet可以被映射到多个URL上,即多个<servlet-mapping>元素的<servlet-name>子元素的值可以为同一个Servlet注册名

	在Servlet映射到的URL中也可以使用*通配符.但是只能有两种固定格式:
	一种是"*.扩展名" 另一种是以"/"开头并以"/*"结束

	使用通配符时,可能访问的URL与多个Servlet的URL相匹配.这时就有优先级问题
	优先级:
		1.绝对路径
		2.以"/"开头的比"*"开头的优先级高
		3.都以"/"开头时,找最匹配的

	如果某个Servlet的映射仅仅为"/",就称之为默认的Servlet.他负责处理没有映射路径的URL请求的响应

servlet的线程安全问题
	
	当多个客户端并发访问同一个servlet时,web服务器就会为每一个客户端的访问请求创建一个线程
	并在这个线程上调用servlet的service方法,因此service方法内如果访问的是同一个资源的话,就有可能引发线程安全问题
	
	为了避免线程安全问题,在servlet中定义变量,尽量定义为局部变量
	如果一定要定义实例变量,那么一定要加上同步.且同步代码块尽量包含少的代码(效率问题)

	SingleThreadModle接口
	如果Servlet类实现了该接口,那么servlet引擎将以单线程的模式来调用service方法
	在该接口中没有定义任何方法,自要在定义servlet时加上实现该接口的声明即可
	
	对于实现了该接口的servlet,servlet引擎仍支持对该servlet进行多线程并发访问
	其采用的方式是产生多个servlet实例,并发的每个线程分别调用一个独立的servlet实例对象
	但是真正意义上的多线程是在一个servlet实例的情况下进行并发访问,所以该接口已经过时

	解决线程安全的方法:
	1.使用java同步机制(效率低)
	2.使用SingleThreadModle接口(已过时)
	3.合理决定在servlet中定义变量的作用域(定义为局部变量)

Servlet参数配置
	ServletConfig对象(由容器创建)
	在web.xml文件的<servlet>标签下添加<init-param>标签用来配置初始化参数
	有<param-name>和<param-value>两个个子标签,用来标识参数名和参数的值

	配置了初始化参数后,web容器在创建Servlet实例时,会自动将这些参数封装到ServletConfig对象中
	并在调用init(config)方式时,将该对象作为参数传递.可以通过该对象的方法获取当前Servlet的初始化参数信息
	
	通过init(config)方法可以获取到该对象:this.config=config;

	然后通过config对象的getInitParameterNames()方法可以获得参数名的Enumeration.通过遍历可以获取其名称

	getInitParameter(name)  通过参数名获取参数的值 
	getServletName()  可以获取到该servlet的名字

	可以通过初始化参数获取指定的字符集编码以及获取数据库连接信息

ServletContext对象

	在web容器启动的时候,会为每一个web应用都创建一个ServletContext对象
	每一个web应用都对应唯一的ServletContext对象,该对象代表的就是当前的web应用

	通过ServletConfig对象的getServletContext()方法就可以得到当前的ServletContext对象

	如果继承了HttpServlet的servlet类,在GenericServlet类中,已经封装了该步骤,直接调用getServletContext()方法,即可获得ServletContext对象

	作用:
	1.实现多个Servlet之间的数据共享
	在一个web应用中,所有的Servlet共享同一个ServletContext对象,
	因此Servlet对象之间可以通过ServletContext对象来实现通讯

	ServletContext对象是一个域对象(域对象就是说在其内部维护了一个Map<String,Object>)
	常用方法:
	Object getAttribute(String name):根据名称获取绑定的对象
	Enumeration getAttributeNames() :获取ServletContext域中的所有名称
	void removeAttribute(String name):根据名称移除对象
	void setAttribute(String name,Object value):添加或修改对象

	2.获取web应用的初始化参数(应用的全局参数,ServletConfig只是单个Servlet)
	在web.xml的根元素下配置<context-param>
	子标签<param-name>和<param-value>来表示全局参数的名称和值
	这些全局参数通过ServletContext对象来获取
	Enumeration getInitParameterNames()  获取全部参数的名称
	Object getInitParameter(String name)  获取指定名称参数的值

	3.实现Servlet的转发

	4.利用ServletContext对象来读资源文件
	通过ServletContext对象获取文件的真实路径
	getRealPath(String); 通过该对象调用方法可以得到文件的真实路径.路径以"/"开头,代表应用的根目录

	设置下载文件的步骤
	1.得到下载文件的路径,通过ServletContext对象获取真实路径
	2.构建文件输入流,读取下载文件
	3.通过response(响应对象)的setHeader(name,value)设置响应消息头
	Content-Disposition  以下载形式打开文件   Content-Type  文件的格式
	4.通过response的getOutputStream()方法获取输出流对象
	5.建立一个byte数组作为缓冲,连接输入流和输出流,完成文件输出
	6.关闭流

	当文件名为中文时.在setHeader设置是否下载时,filename为中文会出现编码问题
	这时要用进行URL编码   通过JDK中的URLEncoder类的静态方法encode(String,enc)进行编码
	W3C声明应该使用UTF-8编码,否则可能造成不兼容性

	读取配置文件的三种方式:
	1.ServletContext对象的getRealPath()方法
		特点:可以获取任何文件,但是只能在web环境下使用
	2.利用Util包下的ResourceBundle类的getBundle("基名")静态方法
		特点:只能读取类路径下的properties文件,基名:不带扩展名
	3.利用类加载器读取配置文件
		特点:可以再非web环境下,可以读取类路径下的任何文件
		1.通过class对象调用getClassLoader()方法获取类加载器
		2.InputStream in = cl.getResourceAsStream("类路径")
		3.new一个properties集合,使用load方法,将输入流作为参数传递
		4.用properties对象调用getProperty(key)方法获取需要的值

	