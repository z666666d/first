概述：
	用户打开浏览器，访问服务器的多个web资源，然后关闭浏览器，整个过程称之为会话

	每一个用户在使用浏览器与服务器进行会话的过程中，不可避免的要产生一些数据，程序就要想办法为每个用户保存这些数据
	
	例如：用户通过一个servlet购买商品，程序要纪录用户购买的商品，在结账的servlet时，读取这些数据完成结账
	如果用request对象存储数据：可以用转发将request的数据在结账的servlet使用，但是每购买一个商品就必须结一次账
	如果使用servletContext对象：一个应用只有一个对象，不能为每个用户单独保存数据

会话技术：
	1.Cookie技术：客户端技术
	cookie是一小段信息，servlet把这些信息写到响应头set-cookie中，保存在浏览器的缓存中
	浏览器可以通过请求头cookie将这些信息发送到服务端
	每个客户端对每个网站,只支持20个cookie
	一个浏览器最多保存300个cookie
	每个Cookie大小不能超过4kb

	cookie的属性：两个必须的属性：name和value  可选属性：comment、path、domain、maxage、version
	通过domain+path+name 定位唯一的cookie
	通过get+属性名/set+属性名的方法可以获取或设置属性的值
	maxage属性:设置cookie的最大存活时间,默认是浏览器关闭就删除.单位是秒
	domain默认为写入cookie的网站名
	path:默认为写入cookie的页面路径
	当访问domain和path相同的的页面时,请求里才有cookie
	所以可以设置path为request.getContextPath()方法获取该应用的路径
	那么访问该应用下的所有页面都可以得到该cookie
	comment:该cookie的注释
	
	要删除一个cookie,可以新建一个path和name相同的cookie,将maxage设置为0
	然后用response.addCookie(c)将原来的cookie覆盖,即可完成删除操作
	也可以用request.getCookies()方法获取所有cookie,然后通过遍历得到指定的cookie
	在将该cookie的maxage设置为0

	使用HttpServletResponse.addCookie(Cookie c);方法向浏览器写cookie

	服务端通过HttpServletRequest.getCookies()方法获得所有的cookie
	
	2.HttpSession技术：服务端技术
	httpSession是一个域对象,服务器会为每一个用户浏览器创建一个会话对象
	默认情况下,一个浏览器独占一个session对象.
	服务器程序可以把用户数据写到用户浏览器独占的session中.
	当用户使用浏览器访问其他程序时,其他程序可以从用户的session中取出该用户的数据,为用户服务

	session与cookie的区别
	cookie是把用户的数据写给用户的浏览器的,存储在客户端

	session是由服务器创建的,可以通过request.getSession()方法得到session对象
	域对象:所以有setAttribute,getAttribute,removeAttribute方法,来操作用户的数据

	HttpSession服务器端技术,其实就是使用cookie技术,
	服务器向客户端写了一个特殊的cookie,名字为"JSESSIONID",值为当前session对象的ID(唯一的);
	path为当前应用路径,相当于getContextPath()得到的路径

	常用方法:
	HttpServletRequest.getSession()  根据客户端cookie(JSESSIONID)的值,查找对应的session对象,如果没有,则创建一个session对象
	HttpServletRequest.getSession(boolean):  如果为参数为true,跟无参方法一样.如果为false,只会查找.没有不会创建

	HttpSession.getId() 获取当前session对象的唯一id

防止表单重复提交的方法
	通过Random().next()方法随机生成一个数作为令牌

	将令牌存入session对象中

	同时在表单中设置一个隐藏的即type为hidden的input标签
	将令牌作为value值提交

	在处理表单的servlet中,判断session对象中的令牌和表单提交的令牌是否相等
	相等则进行登录操作并将session对象的中令牌删除
	不相等则表示是重复提交的表单,不进行处理或返回"不要重复提交"

	1.md5加密算法,BASE64编码
	通过MassageDigest.getInstance("md5");获得md5算法
	byte b[]=md.digest(str.getBytes());将指定的字符串通过md5算法转换为字节序列
	BASE64Encoder base64=new BASE64Encoder();新建一个base64编码
	base64.encode(b);将md5算法产生的字节序列用base64编码方式转换为明文

	2.通过java.util包的UUID类可以生成唯一的标识码
	UUID.randomUUID();随机生成唯一的一段序列

客户端禁用cookie后会话数据的保存
	客户端禁用cookie对http://localhost无效

	禁用cookie后,可以在URL后加上ID    URL:JSESSIONID=.....
	这种方式称为URL重写

	必须对网站中所有的URL地址都进行重写,如果有一个页面没有重写,就会重新创建一个新的session对象
	HttpServletResponse.encodeURL(url);方法进行URL重写
	这是一个只能方法,会自动判断用户是否禁用了Cookie,没有禁用,则不会重写

HttpSession对象的状态及转换
	session对象创建:第一个调用getSession()方法时创建
	session对象销毁:调用Session.invalidata()方法销毁或超时(默认为30分钟)

	可以通过web.xml更改HttpSession对象的超时时间
	在根元素下加上<session-config>标签
	该标签的子标签为<session-timeout>    值必须为自然整数,单位为分钟

	HttpSession对象的持久化:由服务器来完成
	钝化的三种情况:
	1.当前的HttpSession对象太多
	2.某些HttpSession对象长时间没有使用
	3.服务器重启或应用重新加载了

	活化的情况:
	1.用户又开始使用当前的HttpSession对象了
	2.服务器重启完成或应用重新加载成功后

	想要持久化,往session对象中存的对象必须序列化即实现Serializable接口
	



