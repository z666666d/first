概述
	正则表达式主要用于操作字符串数据
	String类的matches（regex）方法可以检测字符串是否匹配给定的正则表达式
	通过一些特定的符号来表示字符串的规则

	正则表达式虽然简化了代码的书写。但是阅读性变差了

正则表达式的常见规则
	
	字符
	x		任意字符
	\\		反斜杠字符
	\t		制表符
	\r		回车符
	\n		换行符

	字符类
	[abc]		表示该位置的字符为a或b或c
	[^abc]		表示该位置的字符为除了abc的任意字符
	[a-zA-Z]	所有大小写字母
	[a-d[m-p]]	a-d和m-p的并集
	[a-z&&[def]]	a-z和[def]的交集
	
	预定义字符
	\d		0-9
	\D		[^0-9]
	\s		空白字符
	\S		非空白字符
	\w		单词字符：所有大小写字母，0-9数字以及_下划线
	\W		非单词字符

	边界匹配器
	^		行的开头
	$		行的结尾
	\b		单词边界
	\B		非单词边界

	数量词
	？		一个或没有
	*		零个或多个
	+		一个或多个
	{n}		刚好n个
	{n，}		至少n个
	{n，m}		n到m个

正则表达式对字符串的常见操作
	
	1、匹配
		使用String类的matches（regex）方法

	2、切割
		使用String类的split（regex）方法

	组	用（）括起来进行封装
	 ((A)(B(C))) 这个表达式中有四个组
	 0	 ((A)(B(C))) 
	 1	（A）
	 2	（B（C））
	 3	（C）

	 用\n表示各组的引用。
	 如表示一个aaaa字符
	 "（.）\\1+"

	 3、替换
		使用String类中的replaceAll（regex，str）方法
		
		在同一个方法中，前一个参数是正则表达式
		可以再第二个参数中用$表示前一个正则表达式中的组
		$符号后面直接加数字表示第几组，不用加反斜杠转义

	4、获取
		1、通过pattern类的静态方法compile（regex）方法获取pattern对象，正则表达式对象
		2、通过pattern对象调用matches（str）方法获取匹配器对象Matches
		3、通过比较器对象的方法对字符串进行操作

		Matches类的三种不同的匹配操作
		matches方法。将整个字符串与正则表达式进行匹配
		lookingAt方法  将字符串从开头开始于正则表达式进行匹配
		find方法  在字符串中查找与正则表达式匹配的下一个子序列
		这三个方法返回值全是boolean类型
		
		要想获取查找到的子字符串，要用到group方法
		该方法用于返回查找到的子字符串