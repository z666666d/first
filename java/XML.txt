概述
	XML实质可扩展标记语言，一种标记语言，类似HTML

	XML被设计的宗旨是存储或传输数据的，而非显示数据。HTML是用来显示数据的

	XML是一种通用的数据交换格式，没有被预定义，允许用户自定义标签
	一个标签用于描述一段数据，一个标签分为开始标签和结束标签
	在标签内可以使用其他标签进行嵌套，用来实现数据关系的描述
	XML中的数据必须用解析器来解析（parser）执行或显示

	在Java中，传统的配置文件是*.properties属性文件，通过key=value 的形式来存储数据
	但XML表述的数据更为丰富  XML技术除了用于描述数据和数据关系之外，主要作为软件的配置文件
	通过XML配置文件可以提高系统的灵活性，即程序的行为是通过XML文件来配置的，而不是硬编码
	
XML的基本组成
	
	1.文档声明：
	作用：用于标识该文档是一个XML文档
	注：声明必须出现在文档的第一行，前面不能出现空行和注释

	最简单的XML声明:<?xml version='1.0'?>
	声明中的encoding属性:说明当前的XML文档所使用的编码.默认为UTF-8
	保存在磁盘上的文件编码必须与声明中的编码方式一致

	standalone属性:说明XML文档是否是独立的

	2.元素
	就是指XML中的标签.标签分为开始标签和结束标签.
	注:
	结束标签不能省略,如果标签内部没有主体,可以写成内部闭合标签

	标签内部可以嵌套若干个子标签,但是标签必须合理嵌套,不能进行交叉嵌套

	一个XML文档有且仅有一个根元素(根标签).

	HTML中会忽略多余的空格以及换行,但是XML不会忽略主体中的空格和换行

	标签的命名规范:
	名称可以包含字母,数字,减号,下划线和英文句点.
	严格区分大小写
	只能以字母或下划线开头
	不能以xml或XML开头--W3C保留
	名称字符之间不能出现空格或制表符
	名称字符之间不能是用冒号(有特殊用途)

	3.元素的属性:
	一个元素可以有多个属性,每个属性都有他自己的名称和取值
	属性值必须用引号引起来
	属性名称的命名规范与元素的命名规范相同
	元素的属性不允许重复
	在XML中,标签属性所代表的信息可以用子标签的形式来描述

	4.注释
	与HTML中的注释完全一致
	<!--注释-->
	注释不能出现在声明之前,且声明不能嵌套

	5.CDATA区
	CDATA是character Data的缩写
	作用:CDATA区中的内容都是文本.可以将标签变成文本
	<![CDATA[
		文本内容
	]]>

	6.特殊字符
	这些特殊字符,要在元素主体中作为普通文本,必须进行转义
	&	&amp;
	<	&lt;
	>	&gt;
	"	&quot;
	'	&apos;

	7.处理指令 简称PI
	用来只会软件如何解析XML文档
	语法:<? 指令内容 ?>
	常用的处理指令:
	XML声明.
	xml-stylesheet指令:指示XML文档的CSS样式

XML约束DTD
	XML都是用户自定义的,若出现一个小错误,就可能造成软件解析失败,而无法获取文档内容
	在XML中可以编写一个文档来约束XML的书写规范,这个文档就称之为约束

	两个概念:
	1.格式良好的XML文档.符合XML语法
	2.有效的XML文档.遵循约束规范的

	约束规定了XML中允许出现的袁术和属性以及元素出现顺序等等

	常用的约束技术:
	XML DTD
	XDR
	SOX
	XML Schema

	DTD是指文档类型定义,用于约束XML的书写规范

	DTD约束文档可以再XML文档中直接定义,也可以作为单独的dtd文档进行编写
	注意:dtd文件必须以UTF-8编码进行保存
	
	引入外部的DTD文档约束的方式:
	两种情况:
	1.DTD文件再本地时:
	<!DOCTYPE 根元素名称 SYSTEM "DTD文件路径">
	2.DTD文件在网络上
	<!DOCTYPE 根元素名称 PUBLIC "DTD名称" "DTD的路径URL">

	DTD语法细节
	1.定义元素
	在DTD文档中使用ELEMENT关键字来定义一个元素
	<!ELEMENT 元素名称 使用规则>
	使用规则:
	(#PCDATA) 指示元素的主体内容只能是普通文本
	EMPTY:指示元素不能有主体内容
	ANY:元素的主体内容可以为任意类型
	(子元素):指示元素中能够包含的子元素
		如果多个子元素用逗号分开,说明必须按照声明的顺序编写XML文档
		如果多个子元素用'|'分开,说明在多个子元素中任选其一
		如果子元素后名带有'+','*','?'说明子元素出现的次数
		'+'表示一次或多次,'*'表示零次或多次,'?'表示零次或一次
		什么都没有,表示有且只有一次

	2.定义属性:
	在DTD文档中使用ATTLIST关键字来为一个元素声明属性
	语法:<!ATTLIST 元素
		属性名1 属性值类型 设置说明
		属性名2	属性值类型 设置说明>

	属性值类型:
	CDATA:说明该属性的取值为普通的文本
	EMUMERATED枚举形式(不是关键字):语法:(值1|值2...)
		设置取值返回,必须从设定好的值中取值
	ID:属性的取值不能重复,必须是唯一值

	设置说明:
	#REQUIRED:表示该属性必须出现
	#IMPLIED:表示该属性可有可无
	#FIXED:表示属性的取值为一个固定的值  语法:#FIXED "固定值"
		固定值属性可以不写,写的话值必须是设置的固定值
	直接值:在设置说明的时候直接写"默认值".
		与固定值不同,该属性不写就默认为默认值,可以设置为其他的值

	3.定义实体
	定义实体就是为一段内容指定一个名称,使用时通过这个名称就可以引用其代表的内容
	在DTD文档中.使用ENTITY关键字来声明一个实体
	实体可以分为引用实体和参数实体,两者的语法不同

	引用实体:
	在DTD中定义,在XML中使用
	语法:<!ENTITY 实体名称 "实体内容">
	引用方式:&实体名称

	参数实体:
	在DTD中定义,在DTD中使用
	语法:<!ENTITY % 实体名称 "实体内容">
	引用方式:%实体名称

Java解析XML
	常用解析XML的方式:DOM和SAX方式

	DOM:文档对象模型  W3C推荐的解析方式
	SAX:Simple API for XML .是非官方标准,但几乎所有的XML解析器都支持它

	DOM通过节点操作文档,非常适合增删改查.但是,必须将整个XML文件全部读到内存中
	SAX只能进行查询操作,节省内存空间

	这些标准只是接口,具体实现就是XML解析开发包
	常用的解析开发包有:JAXP Dom4J JDom
	JAXP:SUN推出的实现,能进行DOM和SAX方式解析
		JAXP是JavaSE的一部分.存在在以下几个包中
		org.w3c.dom:提供DOM方式解析XML的标准接口
		org.w3c.sax:提供SAX方式解析XML的标准接口
		javax.xml:提供了解析XML文档的类
	
	在javax.xml.parsers包中,定义了几个工厂类.
	通过调用这些工厂类,可以得到对XML文档进行解析的DOM或SAX解析器对象

	JAXP 的DOM解析方式:
	1.得到解析工厂对象
	通过DocumentBuilderFactory的静态方法newInstance()方法获取该工厂类的实例对象
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	2.通过解析工厂对象获得解析器对象
	DocumentBuilder builder = factory.newDocumentBuilder();
	3.通过解析器对象解析指定的XML文档,得到document对象
	Document document = builder.parse("xml文件路径");
	通过document对象可以获取Node,Element等对象对文档对象进行增删改查

	4.更新XML文档
	如果对document对象进行了修改,就需要将内存中的对象写入XML文件中,才能完成修改
	通过TransformerFactory工厂类的newInstance()方法获取工厂实例
	在通过工厂对象调用newTransformer()获得Transformer转换对象
	Transformer对象的transfrom(source,result)方法可以将xml源树转换为结果树
	source为一个接口,可以将document对象作为参数传入他的实现类DOMSource的构造方法中
	result也是一个接口,可以new一个StreamResult实现类对象,将目标文件作为参数传入即可

	sax解析:
	在使用DOM解析XML文档时,需要读取整个XML文档到内存中,形成代表DOM树的document对象
	从而对XML进行操作.但是如果XML文档过大,会消耗计算机的大量内存,甚至导致内存溢出

	SAX解析允许在读取文档的时候,进行文档的处理.不必等到文档全部读取完再进行操作
	该方式只能进行查询操作
	步骤:
	1.得到解析工厂:SAXParserFactory
	2.得到解析器:SAXParser
	3.得到XML读取器:XMLReader
	4.注册事件处理器:ContentHandler
	5.读取XML文档
	
	SAX解析的原理:通过读取器读取XML文档,当读到某一部分时(文档的开始,元素的开始,文本,文档的结束,元素的结束等)
	会调用到事件处理器的对应方法,读到的数据会以参数的形式传递给对应的方法
	
	所以只需要重写事件处理器中的方法,就可以完成相应的操作

单元测试
	用于对方法测试
	如果一个方法是测试方法,必须在前面加上 @Test注解
	且测试方法不能有参数和返回值

	在方法前加上 @Before 或者 @After 表示在每个测试方法执行前或执行后进行调用
	在方法前加上 @BeforeClass 或者 @AfterClass 表示在类加载时调用一次  方法必须是static

XML Schema约束
	也是一种用于定义和描述XML文档结构和内容的模式语言,他的出现就是为了克服DTD的局限性

	Schema与DTD的区别
	1.XML Schema符合XML语法结构
	2.DOM,SAX等XML API很容易解析出XML Schema文档中的内容
	3.XML Schema对名称空间支持的非常好
	4.XML Schema比 XML DTD 支持更多的数据类型,而且支持用户自定义新的数据类型
	5.XML Schema定义约束的能力非常强大,可以对XML实力文档做出细致的语义限制
	6.XML Schema不能像DTD一样定义实体,比DTD更复杂

	XML Schema已经是W3C标准,逐步取代DTD
	XML Schema文件本身就是一个XML文件,但是他的扩展名为.xsd
	一个XML Schema文档通常被称为模式文档(约束文档),遵循这个文档写成的XML文件称之为实例文档
	和XML文件一样.XML Schema文档也必须有一个根节点,但这个根节点的名称为schema

	根元素的写法
	<命名空间:根元素  xmlns:命名空间="URI"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="URI Schema文档路径">