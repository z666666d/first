Lambda表达式  
	JDK8的新特性，提供了对闭包的支持
	在JDK8之前，java是通过匿名内部类实现闭包

	语法：
	(params) -> expression
	(params) -> statement
	(params) -> { statements }

	没有参数时写成()
	由于java编译器的类型推断机制，编译器能够根据上下文信息推断出参数的类型
	在写参数的时候可以省略参数类型，当然也有推断失败的情况，这时就要手动的指定参数

	通常都会把lambda表达式内部变量的名字起得短一些。这样能使代码更简短，放在同一行

	示例：
	// Java 8之前：
	new Thread(new Runnable() {
	    @Override
	    public void run() {
	    System.out.println("Before Java8, too much code for too little to do");
	    }
	}).start();

	//Java 8方式：
	new Thread( () -> System.out.println("In Java8, Lambda expression rocks !!") ).start();

	通过Lambda表达式使代码更简洁

Lambda表达式简写的依据
	1.能够使用Lambda的依据是必须有相应的函数接口（函数接口，是指内部只有一个抽象方法的接口）
	也就是说你并不能在代码的任何地方任性的写Lambda表达式。实际上Lambda的类型就是对应函数接口的类型

	2.Lambda表达式另一个依据是类型推断机制
	在上下文信息足够的情况下，编译器可以推断出参数表的类型，而不需要显式指明
	
要点：
	1.lambda表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，
	或者SAM（Single Abstract Method 单个抽象方法）类型。这些称为lambda表达式的目标类型，
	可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，
	都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，
	例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。
	
	2.lambda表达式内可以使用方法引用，仅当该方法不修改lambda表达式提供的参数。本例中的lambda表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。
	示例：
	list.forEach(n -> System.out.println(n)); 
	list.forEach(System.out::println);  // 使用方法引用
	
	3.lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。
	
	4.Lambda表达式在Java中又称为闭包或匿名函数

	5.Lambda方法在编译器内部被翻译成私有方法，并派发 invokedynamic 字节码指令来进行调用。

	6.lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在lambda内部修改定义在域外的变量。
	和内部类一样，使用到的外部变量必须为final的

lambda表达式和内部类的区别
	1.匿名内部类可以为任意接口创建实例――不管有多少个抽象方法，只要匿名内部类实现了所有方法即可。
	但是Lambda表达式只能为函数式接口创建实例。

	2.Lambda表达式被编译为私有方法，而内部类为一个类

	3.匿名内部类可以为抽象类甚至普通类创创建实例，
	但lambda表达式只能为函数式接口创建实例。

	4.匿名内部类实现的抽象方法体允许调用接口中的默认方法，
	但Lambda表达式的代码块不允许调用接口中的默认方法。