1.javascript概述
	JavaScript是基于对象和事件驱动的脚本语言,主要应用于客户端
	特点:
	1.交互性:可以做到信息的动态交互
	2.安全性:不允许直接访问本地硬盘
	3.跨平台性:只要是有能够解析JS的浏览器都可以执行,和平台无关

2.JavaScript和java的区别
	1.JS和java是两种语言,JS式Netscape公司的产品,而java是sun公司.现在是oracle公司的产品
	2.JS是基于对象的语言,java是面向对象的语言
	3.JS只需要解释就能执行,java需要先编译成字节码文件,再执行
	4.JS是弱类型,java是强类型

3.JS和HTML结合的方式
	1.将JS代码封装到<script>标签中
	2.将js代码封装到js文件中,并通过<script>标签的src属性导入

	注:如果<script>标签中使用了src属性,那么该标签中封装的JS代码不会被执行
	所以,导入js文件通常都是用单独的<script>标签来完成的

4.JS的语法
	
	通常高级程序设计语言所包含的语法内容：
		  1，关键字:该种语言中被赋予了特殊含义的单词。
		  2，标示符:用于标示数据和表达式的符号。通常可以理解为在程序中自定义的名称。比如变量名，函数名。
		  3，注释:注解说明解释程序。用于调试程序。
		  4，变量:用于标示内存中一片空间。用于存储数据，该空间的中的数据是可以变化的。 
		  			什么时候使用变量，当数据不确定的时候。
		  5，运算符：可以让数据进行运算的符号。
		  6，语句:用于对程序的运行流程进行控制的表达式。
		  7，函数:用于对功能代码进行封装，便于提高复用性。
		  8，数组:对多数据进行存储，便于操作。就是传说中容器。
		  9，对象:只要是基于对象的语言，或者是面向对象的语言，就存在着对象的概念，
		  			对象就是一个封装体。既可以封装数据有可以封装函数。 
		  
		 这些都是高级程序设计语言具备的共性内容，只不过各种语言对这些内容的表现形式有所不同。
		 但是使用基本思想是一致。
	
	JS定义变量，使用关键字var
		JS是弱类型的语言
		var x = 4; var可以不写,应为JS是非严谨的语言
		而且定义完变量x以后,可以将任何数据类型的数据赋值给var

		全局变量和局部变量

		在脚本片段中(<script>标签中)定义的变量都是全局变量,在整个页面中都有效
		在函数中定义的变量是局部变量.只有函数中有效

	JS运算符
		1.算数运算符
		+ - * / % ++ --
		由于JS是弱类型的,var x = 3710,x/1000*1000=3710
		a=3.1,b=2.9.  在JS的结果是6而不是6.0
		字符串后用加号是连接符号,而用减号会将字符串变成数字,进行计算
		在JS中false为0或者null,true表示非0,非null,参与计算默认为1
		
		2.赋值运算符
		= += -= *= /= %=

		3.比较运算符
		> < >= <= != ==

		4.逻辑运算符
		&&  ||  !
		注意:在JS中&和|是位运算符,得出的结果是0或1
		只有用&&和||结果才是true或false
		
		5.位运算符
		& | ^ >> << >>> ~

		6.三元运算符
		? :

	JS语法细节
		
		1.undefined:未定义,其实是一个常量,使用一个没赋值的变量就会出现undefined
		
		2.在JS中用用typeof来获取具体的数据类型typeof(value)	
		并且可以用"数据类型"来判断

	JS语句
		
		1.顺序语句

		2.判断语句
		代表语句:if
		注意:if的条件判断时,常量最好放在左边,变量放右边
		因为==少个等号,JS是不会保存的,值不为零就默认为true

		3.选择结构
		switch语句
		由于JS是弱类型语言,所以可以对任意数据类型进行选择
		
		4.循环语句
		while和for

		5.其他语句
		break和continue
		默认是跳出当前循环
		如果是循环嵌套,可以写成w:for
		那么break w;或者continue w;语句跳出的是w那个for循环
	
	JS数组
		JS中定义数组的两种方式
		1.var arr = [];将数组元素直接写入中括号中
		2.使用JavaScript中的Array对象来完成定义的
		var arr = new Array();
		var arr = new Array(5);//表示定义的数组长度为5
		var arr = new Array(5,6,7)//表示数组的元素是5,6,7
		即,一个参数表示为数组长度,多个参数表示为数组元素


		数组的类型是object类型(对象)
		特点:
		1.长度是可变的
		2.元素的类型是任意的
		建议一个数组内储存同一类型的元素,操作起来较方便

		json数据格式
		var json = { 键值对 }
		在大括号中,将数据以键值对的形式存入.可以用键名对其进行访问

	JS函数
		定义函数使用function关键字
		function 函数名(参数列表){
		
			函数体;
			return 返回值;
		}
		细节:
		1.只要使用函数的名称就是对函数的调用,参数不够会自动使用undefined
		2.函数中其实有个数组在对传入的参数进行存储,这个数组就是arguments[]

		JS是基于对象的语言,定义完函数后其实是封装在对象中,里面维护了一个arguments数组
		变量=函数名()  表示调用函数,并将返回值赋值给变量
		变量=函数名	是把函数对象的引用变量赋值给变量,这时这个变量也指向了函数对象
		这样就相当于函数有两个名字,如果打印该变量,那么这个函数就会以字符串的形式打印出来
		也就是打印这个函数的代码

		动态函数:使用JS中内置的对象Function
		定义格式:
		var 函数名 = new Function("参数列表","函数体");
		参数列表和函数体都是通过字符串动态指定的

		匿名函数:没有名字的函数,通常是函数的一种简写形式

5.Object对象
	
	该对象的所有功能在JS中的任何对象都具备
	toString方法和valueOf方法

6.String对象

	与java创建方式类似
	1.var str = "abc";
	2.var str = new String("abc");

	String的基本方法主要方法:
	1.给字符串添加html标签的方法
	2.操作字符串的方法(跟java差不多)
	3.Object类的方法

	属性:
	1.length属性   返回字符串的长度
	2.prototype属性
	返回对象的原型引用,可以对象的原型给对象添加原型属性和方法
	对象.prototype 属性/方法名 = 属性值/方法引用/匿名函数

	这样定义的好处,可以直接用  对象.方法  来调用方法,参数就是对象本身

7.Array对象
	
	1.属性
	length属性和prototype属性,用法与String对象类似

	2.方法
	
	concat方法
	arr.concat(arr1,arr2......)
	将多个数组进行连接并返回一个新的数组,
	注:参数也可以是数字,字符串等类型.这时就作为一个元素连接进新数组

	join方法
	将数组转换为字符串形式返回,元素直接以指定的分隔符分隔
	当参数为空时,默认为用逗号进行分隔

	pop方法
	删除数组的最后一个元素,并将该元素返回

	push方法
	给数组添加新的元素,并返回新数组的长度.
	如果添加的元素是数组,数组会作为单个元素添加进来
	用于创建二维数组

	reverse方法
	翻转数组

	shift方法
	移除数组的最后一个元素,并将该元素返回

	slice(start,end)方法
	截取子数组,包含头不包含尾
	如果start或者end为负数,就作为length+start/end处理
	如果end省略就截取到数组的末尾,如果start>end,就不截取任何元素

	sort方法
	排序

	splice(start,deletecount,item1,item2.......)方法
	从start开始删除,删除deletecount个元素,并且在被删除的元素位置上插入新元素
	方法返回所有移除的元素

	unshift方法
	在数组的开头插入新的元素

	以及Object对象的方法

Date对象
	
	用new关键字创建一个date对象后,可以使用不同的get方法获取各种时间值

	日期对象转成毫秒值
	使用getTime方法
	毫秒值转成日起对象.
	直接将毫秒值传入构造方法

	日期对象转成字符串
	使用toLocaleString和
	字符串转换成日期对象
	先用parse方法将指定格式的日期字符串转成毫秒值,再将毫秒值转成日期对象
	
Math对象
	
	常用属性:
	PI属性:即π

	常用方法:
	ceil():返回大于等于指定参数的最小整数
	floor():返回小于等于指定参数的最大整数
	round():四舍五入
	random():产生一个0~1的伪随机数,包含0不包含1
	max,min:参数中的最大值或最小值
	abs():绝对值
	sqrt():平方根,如果参数为负数,返回值为0
	pow(a,b):a的b次幂

Global对象(全局方法)

	该对象的目的就是为了把全局方法集中到一个对象中
	Global对象没有语法,可以直接调用其方法,不需要写对象

	parseInt()方法
	将数字字符串转换成整数的方法.如果不是数字字符串,返回值为NaN
	可以再字符串后加上进制参数,指定其参数,将其转换成10进制

	10进制转换成其他进制使用Number对象的toString方法
	将进制做为参数传递给toString方法即可.
	一般不需要显示的创建Number对象,JS会自动将数字视为对象

with语句
	为了简化书写的语句
	在调用方法时,一般是写成 对象.方法  使用with语句可以简化书写,省略对象
	格式为
	with(对象){
		
		在该区域中使用对象的内容,可以不用写对象
	}

for in 语句
	
	JS中特有的语句,格式为:
	for(变量 in 对象){
		
	}
	对对象进行遍历的语句